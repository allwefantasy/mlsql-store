{"version":3,"sources":["compo/StoreView.js","service/HTTPMethod.js","service/MLSQLAPI.js","compo/ShowMessage.js","compo/AppBaseView.js","service/BackendConfig.js","compo/DSView.js","compo/ScriptView.js","compo/ETView.js","compo/AppView.js","App.js","serviceWorker.js","index.js"],"names":["StoreView","props","handleClick","view","app","setState","current","state","parent","className","Meta","style","marginBottom","title","bordered","extra","onClick","marginTop","width","marginLeft","marginRight","hoverable","cover","src","React","Component","Method","AccessToken","MLSQLAPI","require","url","this","method","body","okFun","failFun","toUpperCase","formBody","property","encodedKey","encodeURIComponent","encodedValue","push","newurl","undefined","join","resStatus","fetch","timeout","headers","sessionStorage","getItem","HTTP","then","res","status","json","value","extractMsg","text","JSON","parse","e","console","log","catch","err","message","ShowMessage","visible","showModal","handleOk","handleCancel","onOk","onCancel","AppBaseView","itemCard","item","name","showMessage","author","href","github_url","official","version","desc","viewName","viewNameForRead","modal","main_class","data","request","METHOD","plugin_type","map","fail","ref","et","DSView","ScriptView","ETView","AppView","App","key","storeView","etView","dsView","scriptView","appView","selectedKeys","mode","Item","type","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a7105c1b.chunk.js","sourcesContent":["import React from \"react\";\nimport {Card, Button} from 'antd';\nimport './store.css'\n\nexport default class StoreView extends React.Component {\n    constructor(props) {\n        super(props)\n        this.props = props\n        this.state = {current: 'store'}\n        this.app = props.parent\n    }\n\n    handleClick = view => {\n        this.app.setState({current: view})\n    };\n\n    render() {\n        return <div>\n            <div className={\"store-plugins-container\"}>\n                <Card.Meta style={{marginBottom: \"20px\"}} title=\"MLSQL Plugins\"/>\n                <div className={\"card-container\"}>\n                    <div className={\"card\"}>\n                        <Card title=\"ET Plugin\" bordered={false}\n                              extra={<Button onClick={() => {\n                                  this.handleClick(\"et\")\n                              }}>Go</Button>}>\n                            ET(Estimator/Transformer) supports command line\n                            or run/train/predict statement.\n                        </Card>\n                    </div>\n                    <div className={\"card\"}>\n                        <Card title=\"DataSource Plugin\" bordered={false}\n                              extra={<Button onClick={() => {\n                                  this.handleClick(\"ds\")\n                              }}>Go</Button>}>\n                            Used in load/save statement.\n                            For example, when you want to load ES,\n                            try to install ES DataSource Plugin.\n                        </Card>\n                    </div>\n                    <div className={\"card\"}>\n                        <Card title=\"Script Plugin\" bordered={false}\n                              extra={<Button onClick={() => {\n                                  this.handleClick(\"script\")\n                              }}>Go</Button>}>\n                            MLSQL Script bundle.\n                            Reusing the script people have already implemented.\n                        </Card>\n                    </div>\n\n                    <div className={\"card\"}>\n                                            <Card title=\"App Plugin\" bordered={false}\n                                                  extra={<Button onClick={() => {\n                                                      this.handleClick(\"app\")\n                                                  }}>Go</Button>}>\n                                                Build new application in Engine\n                     </Card>\n                    </div>\n\n                </div>\n            </div>\n            <div style={{marginTop: \"50px\", width: \"60%\", marginLeft: \"20%\", marginRight: \"20%\"}}>\n                <Card.Meta style={{marginBottom: \"20px\"}} title=\"Feel Free To Install in Your Console\"/>\n                <Card\n                    hoverable\n                    cover=<img src={\"https://docs.mlsql.tech/upload_images/WX20190914-115707@2x.png\"}/>\n                >\n            </Card>\n        </div> < /div>\n    }\n}","export const Method = {\n    GET: \"get\",\n    POST: \"post\",\n    PUT: \"put\"\n}\n\nexport const Status = {\n    Success: 200,\n    BadRequest: 400,\n    Unauthorized: 401,\n    Forbidden: 404,\n    ServerError: 500\n}\n\nexport const AccessToken = {\n    name: \"access-token\"\n}\n","import * as HTTP from \"../service/HTTPMethod\";\n\nconst uuidv4 = require('uuid/v4');\n\nexport class MLSQLAPI {\n\n    constructor(url) {\n        this.url = url;\n    }\n\n\n    request(method, body, okFun, failFun) {\n        method = method.toUpperCase();\n\n        let formBody = [];\n        for (let property in body) {\n            let encodedKey = encodeURIComponent(property);\n            let encodedValue = encodeURIComponent(body[property]);\n            formBody.push(encodedKey + \"=\" + encodedValue);\n        }\n\n        let newurl = this.url\n\n        if (method === \"GET\") {\n            newurl = newurl + \"?\" + formBody\n            formBody = undefined\n        } else {\n            formBody = formBody.join(\"&\")\n        }\n        let resStatus = 0\n\n        return fetch(newurl, {\n            method: method,\n            timeout: 1000 * 60 * 60 * 24,\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Accept': 'application/json',\n                'Access-Token': sessionStorage.getItem(HTTP.AccessToken.name) || ''\n            },\n            body: formBody\n        }).then((res) => {\n            resStatus = res.status\n            if (resStatus === 200) {\n                res.json().then((value) => {\n                    okFun(value)\n                })\n            }\n            return res\n        }).then(res => {\n            const extractMsg = () => {\n                res.text().then(value => {\n                        try {\n                            failFun(JSON.parse(value)[\"msg\"])\n                        } catch (e) {\n                            failFun(value)\n                        }\n                    }\n                )\n            }\n\n            switch (resStatus) {\n                case 201:\n                    break\n                case 400:\n                    extractMsg()\n                    break\n                case 500:\n                    extractMsg()\n                    break\n                default:\n                    console.log('unhandled')\n                    break\n            }\n        })\n            .catch((err) => {\n                failFun(err.message)\n            })\n    }\n}","import * as React from \"react\";\nimport {Modal, Result} from \"antd\";\n\nexport default class ShowMessage extends React.Component {\n\n    state = {visible: false, title: \"\", value: \"\"};\n\n    showModal = (title, value) => {\n        this.setState({\n            visible: true,\n            title: title,\n            value: value\n        });\n    };\n\n    handleOk = e => {\n\n        this.setState({\n            visible: false,\n        });\n    };\n\n    handleCancel = e => {\n        this.setState({\n            visible: false,\n        });\n    };\n\n    render() {\n        return (\n            <div>\n\n                <Modal\n                    title={this.state.title}\n                    visible={this.state.visible}\n                    onOk={this.handleOk}\n                    onCancel={this.handleCancel}\n                >\n                    <p>{this.state.value}</p>\n\n                </Modal>\n            </div>\n        );\n    }\n}","import React from \"react\";\nimport {Card, Button} from 'antd';\nimport './AppBaseView.css'\nimport {MLSQLAPI} from \"../service/MLSQLAPI\";\nimport {LIST_ET_PLUGINS} from \"../service/BackendConfig\";\nimport {Method as METHOD} from \"../service/HTTPMethod\";\nimport ShowMessage from \"./ShowMessage\";\n\n\nexport default class AppBaseView extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {data: []}\n        this.props = props\n        this.app = props.parent\n    }\n\n    componentDidMount() {\n        const api = new MLSQLAPI(LIST_ET_PLUGINS)\n        api.request(METHOD.GET, {plugin_type: this.viewName()}, (res) => {\n            this.setState({\n                data: res.map(item => {\n                    return this.itemCard(item)\n                })\n            })\n        }, fail => {\n\n        })\n    }\n\n    itemCard = (item) => {\n        return <div className={\"appBaseView-card\"}>\n            <Card title={item.name}\n                  bordered={false}\n                  extra={<Button onClick={() => {\n                      this.showMessage(item)\n                  }}>Show install command</Button>}>\n                <p>User: {item.author}</p>\n                <p>Github: <a href=\"{item.github_url}\">{item.github_url}</a> </p>\n                <p>Official: {item.official === 0 ? \"true\" : \"false\"}</p>\n                <p>version: {item.version}</p>\n                <p>Supports mlsql versions: {item['mlsql_versions']}</p>\n                <br/>\n                <br/>\n                <pre>{item.desc}</pre>\n\n            </Card></div>\n    }\n\n    viewName = () => {\n        //et 0\n        //ds 1\n        // script 2\n        return 0\n    }\n\n    viewNameForRead = () => {\n        if (this.viewName() === 0) {\n            return \"et\"\n        }\n        if (this.viewName() === 1) {\n            return \"ds\"\n        }\n\n        if (this.viewName() === 2) {\n            return \"script\"\n        }\n    }\n\n    showMessage = (item) => {\n        this.modal.showModal(\"Copy following command to console:\", `!plugin ${this.viewNameForRead()} add ${item.main_class} ${item.name} named ${item.name};`)\n    };\n\n    render() {\n        return <div>\n\n            <div className={\"appBaseView-card-container\"}>\n                {this.state.data}\n            </div>\n\n            <ShowMessage ref={(et) => this.modal = et}/>\n        </div>\n    }\n}","export const BACKEND_SERVER = \"\";\nexport const LIST_ET_PLUGINS = BACKEND_SERVER + \"/api/repo/plugins\";\n","import React from \"react\";\nimport './store.css'\nimport AppBaseView from \"./AppBaseView\";\n\nexport default class DSView extends AppBaseView {\n    constructor(props) {\n        super(props)\n        this.props = props\n        this.state = {current: 'store'}\n        this.app = props.parent\n    }\n\n    viewName = () => {\n        //et 0\n        //ds 1\n        // script 2\n        return 1\n    }\n}","import React from \"react\";\nimport AppBaseView from \"./AppBaseView\";\n\nexport default class ScriptView extends AppBaseView {\n    constructor(props) {\n        super(props)\n        this.props = props\n        this.state = {current: 'store'}\n        this.app = props.parent\n    }\n\n    viewName = () => {\n        //et 0\n        //ds 1\n        // script 2\n        return 2\n    }\n}","import React from \"react\";\nimport AppBaseView from \"./AppBaseView\";\n\nexport default class ETView extends AppBaseView {\n    constructor(props) {\n        super(props)\n        this.props = props\n        this.state = {current: 'store'}\n        this.app = props.parent\n    }\n\n    viewName = () => {\n        //et 0\n        //ds 1\n        // script 2\n        return 0\n    }\n}","import React from \"react\";\nimport AppBaseView from \"./AppBaseView\";\n\nexport default class AppView extends AppBaseView {\n    constructor(props) {\n        super(props)\n        this.props = props\n        this.state = {current: 'store'}\n        this.app = props.parent\n    }\n\n    viewName = () => {\n        //et 0\n        //ds 1\n        // script 2\n        // app 3\n        return 3\n    }\n}","import React from 'react';\nimport {Menu, Icon} from 'antd';\nimport './App.css';\nimport StoreView from \"./compo/StoreView\";\nimport AppBaseView from \"./compo/AppBaseView\";\nimport DSView from \"./compo/DSView\";\nimport ScriptView from \"./compo/ScriptView\";\nimport ETView from \"./compo/ETView\";\nimport AppView from \"./compo/AppView\";\n\n\nexport default class App extends React.Component {\n    state = {\n        current: 'store',\n    };\n\n    handleClick = e => {\n        this.setState({\n            current: e.key,\n        });\n    };\n\n    storeView = () => {\n        if (this.state.current === \"store\") {\n            return <StoreView parent={this}></StoreView>\n        }\n    }\n\n    etView = () => {\n        if (this.state.current === \"et\") {\n            return <ETView parent={this}></ETView>\n        }\n    }\n\n    dsView = () => {\n        if (this.state.current === \"ds\") {\n            return <DSView parent={this}></DSView>\n        }\n    }\n\n    scriptView = () => {\n        if (this.state.current === \"script\") {\n            return <ScriptView parent={this}></ScriptView>\n        }\n    }\n\n     appView = () => {\n            if (this.state.current === \"app\") {\n                return <AppView parent={this}></AppView>\n            }\n        }\n\n    render() {\n        return (\n            <div>\n                <Menu onClick={this.handleClick} selectedKeys={[this.state.current]} mode=\"horizontal\">\n                    <Menu.Item key=\"store\">\n                        <Icon type=\"shopping\"/>\n                        MLSQL Store\n                    </Menu.Item>\n                    <Menu.Item key=\"et\">\n                        <Icon type=\"pull-request\"/>\n                        ET Plugin\n                    </Menu.Item>\n                    <Menu.Item key=\"ds\">\n                        <Icon type=\"appstore\"/>\n                        DataSource Plugin\n                    </Menu.Item>\n                    <Menu.Item key=\"script\">\n                        <Icon type=\"file\"/>\n                        Script Plugin\n                    </Menu.Item>\n                    <Menu.Item key=\"app\">\n                       <Icon type=\"pull-request\"/>\n                       App Plugin\n                     </Menu.Item>\n                </Menu>\n                {this.storeView()}\n                {this.etView()}\n                {this.dsView()}\n                {this.scriptView()}\n                {this.appView()}\n\n            </div>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}